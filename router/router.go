package router

import (
	"github.com/gin-gonic/gin"
	"github.com/gin-gonic/gin/binding"
	"github.com/swaggo/files"       // swagger embed files
	"github.com/swaggo/gin-swagger" // gin-swagger middleware
	"gopkg.in/go-playground/validator.v9"
	"reflect"
	"seckill/handler"
	"seckill/middleware"
	"seckill/model"

	// swagger 文档生成在本项目中的目录，必须导入这个目录文档才能正常显示
	_ "seckill/docs" // docs is generated by Swag CLI, you have to import it.
)

var (
	// 全局路由引擎
	myRouter *gin.Engine
)

func init() {
	myRouter = gin.Default()
	if v, ok := binding.Validator.Engine().(*validator.Validate); ok {
		// 注册 model.LocalTime 类型的自定义校验规则
		v.RegisterCustomTypeFunc(ValidateJSONDateType, model.LocalTime{})
	}
}

// ValidateJSONDateType 解决验证器 binding:"required" 无法正常工作的问题
func ValidateJSONDateType(field reflect.Value) interface{} {
	if field.Type() == reflect.TypeOf(model.LocalTime{}) {
		timeStr := field.Interface().(model.LocalTime).String()
		// 0001-01-01 00:00:00 是 go 中 time.Time 类型的空值
		// 这里返回 Nil 则会被 validator 判定为空值，而无法通过 `binding:"required"` 规则
		if timeStr == "0001-01-01 00:00:00" {
			return nil
		}
		return timeStr
	}
	return nil
}

func InitRouter() * gin.Engine{
	swaggerRouter()
	customRouter()
	return myRouter
}

// SwaggerRouter swagger 路由
// 文档访问地址：http://localhost:8080/swagger/index.html
// @title Gin swagger
// @version 1.0
// @description Gin swagger 示例项目
// @contact.name 清影
// @contact.email 1024569696@qq.com
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8080
func swaggerRouter() {
	// The url pointing to API definition
	url := ginSwagger.URL("http://localhost:8080/swagger/doc.json")
	myRouter.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))
}

func customRouter() {
	api := myRouter.Group("/api")
	{
		userGroup := api.Group("/user")
		{
			userGroup.POST("/register", handler.UserHandler.Register)
			userGroup.POST("/login", handler.UserHandler.Login)
			userGroup.POST("/logout", handler.UserHandler.Logout)
		}

		testGroup := api.Group("/test")
		// 对组内的所有请求都做认证
		testGroup.Use(middleware.Auth())
		{
			testGroup.Any("")
		}

		goodsGroup := api.Group("/goods")
		{
			goodsGroup.GET("/:id", handler.GoodsHandler.QueryGoodsVOByID)
			goodsGroup.POST("/", middleware.Auth(), middleware.SellerAuth(), handler.GoodsHandler.Insert)
			goodsGroup.PUT("/", middleware.Auth(), middleware.SellerAuth(), handler.GoodsHandler.Update)
			goodsGroup.DELETE("/:id", middleware.Auth(), middleware.SellerAuth(), handler.GoodsHandler.Delete)
		}
	}
}