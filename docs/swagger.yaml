definitions:
  model.GoodsDTO:
    properties:
      amount:
        default: 0
        minimum: 1
        type: integer
      endTime:
        type: string
      id:
        type: integer
      img:
        type: string
      name:
        type: string
      originPrice:
        default: 0
        minimum: 0
        type: number
      price:
        default: 0
        minimum: 0
        type: number
      startTime:
        type: string
      stock:
        default: 0
        minimum: 0
        type: integer
    required:
    - amount
    - endTime
    - name
    - price
    - startTime
    - stock
    type: object
  model.GoodsQueryCondition:
    properties:
      endTime:
        type: string
      id:
        type: integer
      index:
        type: integer
      name:
        type: string
      price:
        type: number
      size:
        type: integer
      startTime:
        type: string
      stock:
        type: integer
    type: object
  model.LoginUser:
    properties:
      password:
        example: "123"
        type: string
      username:
        example: tom
        type: string
    required:
    - password
    - username
    type: object
  model.OrderInfoQueryCondition:
    properties:
      goodsId:
        type: integer
      goodsName:
        type: string
      goodsPrice:
        type: number
      id:
        type: integer
      index:
        type: integer
      orderId:
        type: string
      paymentId:
        type: integer
      size:
        type: integer
      status:
        type: integer
      userId:
        type: integer
    type: object
  model.RegisterUser:
    properties:
      kind:
        example: 0
        type: integer
      password:
        example: "123"
        type: string
      username:
        example: tom
        type: string
    required:
    - password
    - username
    type: object
  model.Result:
    properties:
      code:
        example: 0
        type: integer
      data:
        type: object
      message:
        example: 响应信息
        type: string
    type: object
info:
  contact: {}
paths:
  /api/goods:
    post:
      consumes:
      - application/json
      description: 添加秒杀商品进秒杀系统
      parameters:
      - description: 秒杀商品传输信息
        in: body
        name: goods
        required: true
        schema:
          $ref: '#/definitions/model.GoodsDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Result'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Result'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.Result'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Result'
      summary: 添加商品
      tags:
      - 商品管理
    put:
      consumes:
      - application/json
      description: 更新秒杀商品信息
      parameters:
      - description: 秒杀商品传输信息
        in: body
        name: goods
        required: true
        schema:
          $ref: '#/definitions/model.GoodsDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Result'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Result'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.Result'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Result'
      summary: 更新商品
      tags:
      - 商品管理
  /api/goods/{id}:
    delete:
      consumes:
      - application/json
      description: 通过 id 删除商品信息
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Result'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Result'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.Result'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Result'
      summary: 删除商品
      tags:
      - 商品管理
    get:
      consumes:
      - application/json
      description: 通过 id 查询秒杀商品
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Result'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Result'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Result'
      summary: 查询商品
      tags:
      - 商品管理
  /api/goods/list:
    post:
      consumes:
      - application/json
      description: 通过 条件 查询秒杀商品
      parameters:
      - description: 商品信息条件
        in: body
        name: condition
        required: true
        schema:
          $ref: '#/definitions/model.GoodsQueryCondition'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Result'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Result'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Result'
      summary: 查询商品
      tags:
      - 商品管理
  /api/goods/seckillInit:
    post:
      consumes:
      - application/json
      description: 初始化当前商家的秒杀商品去参与秒杀活动
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Result'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Result'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.Result'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Result'
      summary: 初始化秒杀商品
      tags:
      - 商品管理
  /api/order/{id}:
    get:
      consumes:
      - application/json
      description: 通过 id 查询订单数据
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Result'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Result'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Result'
      summary: 查询订单
      tags:
      - 订单管理
  /api/order/list:
    post:
      consumes:
      - application/json
      description: 通过查询条件查询订单列表数据
      parameters:
      - description: 订单查询条件
        in: body
        name: condition
        required: true
        schema:
          $ref: '#/definitions/model.OrderInfoQueryCondition'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Result'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Result'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.Result'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Result'
      summary: 查询订单列表
      tags:
      - 订单管理
  /api/seckill:
    post:
      consumes:
      - application/json
      description: 对商品进行秒杀
      parameters:
      - description: 秒杀商品传输信息
        in: body
        name: goods
        required: true
        schema:
          $ref: '#/definitions/model.GoodsDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Result'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Result'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.Result'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Result'
      summary: 秒杀
      tags:
      - 商品秒杀
  /api/seckill/{goodsId}:
    get:
      consumes:
      - application/json
      description: 通过商品id查询对该商品的秒杀结果
      parameters:
      - description: goodsId
        in: path
        name: goodsId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Result'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Result'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.Result'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Result'
      summary: 查询秒杀结果
      tags:
      - 商品秒杀
  /api/user/login:
    post:
      consumes:
      - application/json
      description: 用户登录签发 JWT
      parameters:
      - description: 用户
        in: body
        name: loginUser
        required: true
        schema:
          $ref: '#/definitions/model.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Result'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Result'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Result'
      summary: 用户登录
      tags:
      - 用户管理
  /api/user/logout:
    post:
      consumes:
      - application/json
      description: 用户退出登录，清除登录 token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Result'
      summary: 退出登录
      tags:
      - 用户管理
  /api/user/register:
    post:
      consumes:
      - application/json
      description: 注册用户并保存到数据库
      parameters:
      - description: 注册用户
        in: body
        name: registerUser
        required: true
        schema:
          $ref: '#/definitions/model.RegisterUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Result'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Result'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Result'
      summary: 用户注册
      tags:
      - 用户管理
swagger: "2.0"
